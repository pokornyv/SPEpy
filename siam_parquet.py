###########################################################
# SPEpy - simplified parquet equation solver for SIAM     #
# Vladislav Pokorny; 2015-2019; pokornyv@fzu.cz           #
# homepage: github.com/pokornyv/SPEpy                     #
# developed and optimized using python 3.7.2              #
# siam_dynamic.py - solver for SPE                        #
# method described in <not published>                     #
###########################################################

import scipy as sp
from scipy.integrate import simps
from scipy.optimize import brentq
from sys import argv,exit,version_info
from os import listdir
from time import ctime,time
from parlib import *
from parlib2 import *
from config_siam import *

t = time()

epsLD = 1e-5    ## convergence criterium for Lambda[w]

sc_scheme = 'fixed'
#sc_scheme = 'iter'

hashes = '#'*80

## python version
ver = str(version_info[0])+'.'+str(version_info[1])+'.'+str(version_info[2])
## header for files so we store the parameters along with data
parline = '# U = {0: .4f}, Delta = {1: .4f}, ed = {2: .4f}, h = {3: .4f}, T = {4: .4f}'.format(U,Delta,ed,h,T)

## print the header #######################################
if chat: 
	print(hashes+'\n# generated by '+str(argv[0])+', '+str(ctime()))
	print('# python version: '+str(ver)+', SciPy version: '+str(sp.version.version))
	print('# energy axis: [{0: .5f} ..{1: .5f}], step = {2: .5f}, length = {3: 3d}'\
      .format(En_A[0],En_A[-1],dE,len(En_A)))
	print('# U = {0: .4f}, Delta = {1: .4f}, ed = {2: .4f}, h = {3: .4f}, T = {4: .4f}'.format(U,Delta,ed,h,T))
	print('# Kondo temperature from Bethe ansatz: Tk ~{0: .5f}'.format(float(KondoTemperature(U,Delta,ed))))
	print('# mixing parameter for Lambda: alpha = {0: .5f}'.format(float(alpha)))

###########################################################
## inicialize the non-interacting Green function ##########
if GFtype == 'lor':
	if chat: print('# using Lorentzian non-interacting DoS')
	GFlambda = lambda x: GreensFunctionLorenz(x,Delta)
	DensityLambda = lambda x: DensityLorentz(x,Delta)
elif GFtype == 'semi':
	if chat: print('# using semielliptic non-interacting DoS')
	W = Delta 	## half-bandwidth 
	GFlambda = lambda x: GreensFunctionSemi(x,W)
	DensityLambda = lambda x: DensitySemi(x,W)
elif GFtype == 'gauss':
	if chat: print('# using Gaussian non-interacting DoS')
	GFlambda = lambda x: GreensFunctionGauss(x,Delta)
	DensityLambda = lambda x: DensityGauss(x,Delta)
elif GFtype == 'sc':
	if chat: print('# using simple cubic lattice non-interacting DoS')
	W = Delta # half-bandwidth 
	GFlambda = lambda x: GreensFunctionSC(x,W)
	print('# Error: this DoS is not yet implemented.')
	exit(1)
elif GFtype == 'sq':
	if chat: print('# using square lattice non-interacting DoS')
	W = Delta # half-bandwidth 
	izero = 1e-6    ## imaginary shift of energiesto avoid poles
	GFlambda = lambda x: GreensFunctionSquare(x,izero,W)
	print('# Error: this DoS is not yet implemented.')
	exit(1)
else:
	print('# Error: DoS not implemented.')
	exit(1)

## using the Lambda from the older method as a starting point
if chat: print('# calculating the fully static vertex at half-filling as a starting point:')
GFzero_A = GFlambda(En_A)
Bubble_A = TwoParticleBubble(GFzero_A,GFzero_A,En_A,T,'eh')
#WriteFile(En_A,GFzero_A,GFzero_A,Bubble_A,WriteMax,WriteStep,parline,'bubble0.dat',chat)
Lambda0 = CalculateLambda(U,Bubble_A,GFzero_A,GFzero_A,En_A,T,chat,epsl)
if chat: print('# - Lambda0 = {0: .6f}'.format(Lambda0))

########################################################
## calculate filling of the thermodynamic Green function
if chat: print('#\n# calculating the initial thermodynamic Green function:')
[nTup,nTdn] = [0.5,0.5]
[nTupOld,nTdnOld] = [1e8,1e8]

k = 1
while any([sp.fabs(nTupOld-nTup) > 1e-6, sp.fabs(nTdnOld-nTdn) > 1e-6]):
	[nTupOld,nTdnOld] = [nTup,nTdn]
	if T == 0.0:
		nup_dens = lambda x: DensityLambda(ed+U/2.0*(x+nTdn-1.0)+h) - x
		ndn_dens = lambda x: DensityLambda(ed+U/2.0*(nTup+x-1.0)-h) - x
	else:
		nup_dens = lambda x: Filling(GFlambda(En_A-ed-U/2.0*(x+nTdn-1.0)+h),En_A,T) - x
		ndn_dens = lambda x: Filling(GFlambda(En_A-ed-U/2.0*(nTup+x-1.0)-h),En_A,T) - x
	nTup = brentq(nup_dens,0.0,1.0,xtol = 1e-6)
	nTdn = brentq(ndn_dens,0.0,1.0,xtol = 1e-6)
	if chat: print('# - - {0: 3d}:   nUp: {1: .8f}, nDn: {2: .8f}'.format(k,nTup,nTdn))
	k += 1

## fill the Green functions
GFTup_A = GFlambda(En_A-ed-U/2.0*(nTup+nTdn-1.0)+h)
GFTdn_A = GFlambda(En_A-ed-U/2.0*(nTup+nTdn-1.0)-h)

#WriteFile(En_A,GFTup_A,GFTdn_A,En_A,WriteMax,WriteStep,parline,'GFTzero.dat',chat)
if chat: print('# - norm[GTup]: {0: .6f}, n[GTup]: {1: .6f}'\
.format(float(IntDOS(GFTup_A,En_A)),float(nTup)))
if chat: print('# - norm[GTdn]: {0: .6f}, n[GTdn]: {1: .6f}'\
.format(float(IntDOS(GFTdn_A,En_A)),float(nTdn)))
if chat: print('# - nT = {0: .6f}, mT = {1: .6f}'.format(float(nTup+nTdn),float(nTup-nTdn)))

##############################
## calculate the Lambda vertex
if chat: print('#\n# calculating the Hartree-Fock self-energy:')
if Lin:
	## reading initial values from command line
	[Lambdapp,Lambdamp] = [LppIn,LmpIn]	
else:
	## using the static guess
	[Lambdapp,Lambdamp] = [Lambda0,Lambda0]

[nTupOld,nTdnOld] = [1e8,1e8]

k = 1
while any([sp.fabs(nTupOld-nTup) > 1e-6, sp.fabs(nTdnOld-nTdn) > 1e-6]):
	if chat: print('#\n# Iteration {0: 3d}'.format(k))
	[nTupOld,nTdnOld] = [nTup,nTdn]
	[Lambdapp,Lambdamp] = CalculateLambdaD(GFTup_A,GFTdn_A,En_A,Lambdapp,Lambdamp,U,T,epsLD,alpha,chat,sc_scheme)
	Kpp = KvertexD( 1, 1,Lambdapp,Lambdamp,GFTup_A,GFTdn_A,En_A,T)
	Kmp = KvertexD(-1, 1,Lambdapp,Lambdamp,GFTup_A,GFTdn_A,En_A,T)
	if chat: print('# - Lambda vertex: Lambda(++): {0: .8f} {1:+8f}i  Lambda(-+): {2: .8f} {3:+8f}i'\
	.format(sp.real(Lambdapp),sp.imag(Lambdapp),sp.real(Lambdamp),sp.imag(Lambdamp)))
	if chat: print('# - K vertex:           K(++): {0: .8f} {1:+8f}i       K(-+): {2: .8f} {3:+8f}i'\
	.format(sp.real(Kpp),sp.imag(Kpp),sp.real(Kmp),sp.imag(Kmp)))
	Sigma0  = U*(nTup+nTdn-1.0)/2.0
	Sigma1  = 0.5*(Lambdapp+Lambdamp)*(nTup-nTdn)	## anomalous HF self-energy
	GFTup_A = GFlambda(En_A-ed-Sigma0+(h-Sigma1))
	GFTdn_A = GFlambda(En_A-ed-Sigma0-(h-Sigma1))
	if h == 0.0:
		if chat: print('# - h = 0, symmetrizing the Green functions to avoid numerical errors')
		GFTup_A = sp.copy((GFTup_A+GFTdn_A)/2.0)
		GFTdn_A = sp.copy((GFTup_A+GFTdn_A)/2.0)
		Sigma1 = 0.0
	if ed != 0.0:
		if T == 0.0:
			nTup = DensityLambda(ed+Sigma0-(h-Sigma1))
			nTdn = DensityLambda(ed+Sigma0+(h-Sigma1))
		else:
			nTup = Filling(GFTup_A,En_A,T)
			nTdn = Filling(GFTdn_A,En_A,T)
	else:
		nTup = nTdn = 0.5
	if chat: print('# - static self-energy: normal: {0: .8f} {1:+8f}i, anomalous: {2: .8f} {3:+8f}i'.\
	format(sp.real(Sigma0),sp.imag(Sigma0),sp.real(Sigma1),sp.imag(Sigma1)))
	if chat: print('# - thermodynamic Green function filling: nTup = {0: .8f}, nTdn = {1: .8f}'.format(nTup,nTdn))
	if chat: print('# - nT = {0: .8f}, mT = {1: .8f}'.format(nTup+nTdn,nTup-nTdn))
	k+=1

if chat: print('# - Calculation of the Hartree-Fock self-energy finished after {0: 3d} iterations.'.format(int(k-1)))

#print('{0: .4f}\t{1: .8f}\t{2: .8f}\t{3: .8f}\t{4: .8f}\t'\
#.format(U,sp.real(Lambdapp),sp.imag(Lambdapp),sp.real(Lambdamp),sp.imag(Lambdamp)))

###########################################################
## spectral self-energy ###################################
if chat: print('#\n# calculating the spectral self-energy:')
SigmaUp_A = SelfEnergyD(GFTup_A,GFTdn_A,En_A,Lambdapp,Lambdamp,U,T,'up')
SigmaDn_A = SelfEnergyD(GFTup_A,GFTdn_A,En_A,Lambdapp,Lambdamp,U,T,'dn')
#WriteFile(En_A,SigmaUp_A,SigmaDn_A,En_A,p.WriteMax,p.WriteStep,parline,'sigma.out',chat)

## quasiparticle weights ##################################
[Zup,dReSEupdw] = QuasiPWeight(En_A,sp.real(SigmaUp_A))
[Zdn,dReSEdndw] = QuasiPWeight(En_A,sp.real(SigmaDn_A))

if chat: print('# - up spin: Z = {0: .6f}, DReSE/dw[0] = {1: .6f}, m*/m = {2: .6f}'\
.format(float(Zup),float(dReSEupdw),float(1.0/Zup)))
if chat and h!=0.0: print('# - dn spin: Z = {0: .6f}, DReSE/dw[0] = {1: .6f}, m*/m = {2: .6f}'\
.format(float(Zdn),float(dReSEdndw),float(1.0/Zdn)))

###########################################################
## interacting Green function #############################
if chat: print('#\n# calculating the spectral Green function:')
if chat: print('# - iterating the final density:')
[nUp,nDn] = [nTup,nTdn]	## for now
[nUpOld,nDnOld] = [1e8,1e8]

k = 1
while any([sp.fabs(nUpOld-nUp) > 1e-6, sp.fabs(nDnOld-nDn) > 1e-6]):
	[nUpOld,nDnOld] = [nUp,nDn]
	nup_dens = lambda x: Filling(GFlambda(En_A-ed-U/2.0*(x+nDn-1.0)+(h-Sigma1)-SigmaUp_A),En_A,T) - x
	ndn_dens = lambda x: Filling(GFlambda(En_A-ed-U/2.0*(nUp+x-1.0)-(h-Sigma1)-SigmaDn_A),En_A,T) - x
	nUp = brentq(nup_dens,0.0,1.0,xtol = 1e-6)
	nDn = brentq(ndn_dens,0.0,1.0,xtol = 1e-6)
	if chat: print('# - - {0: 3d}:   nUp: {1: .8f}, nDn: {2: .8f}'.format(k,nUp,nDn))
	k += 1

GFintUp_A = GFlambda(En_A-ed-U/2.0*(nUp+nDn-1.0)+(h-Sigma1)-SigmaUp_A)
GFintDn_A = GFlambda(En_A-ed-U/2.0*(nUp+nDn-1.0)-(h-Sigma1)-SigmaDn_A)

[nUp,nDn] = [Filling(GFintUp_A,En_A,T),Filling(GFintDn_A,En_A,T)]
if chat: print('# - spectral Green function filling: nUp = {0: .8f}, nDn = {1: .8f}'.format(nUp,nDn))

## DoS at Fermi energy ####################################
DOSF = -sp.imag(GFintUp_A[int(N/2)])/sp.pi

## HWHM ###################################################
[HWHM,DOSmax,wmax] = CalculateHWHM(GFintUp_A,En_A)
if HWHM == 0.0 and chat: print('# - Warning: HWHM cannot be calculated, setting it to zero.')
if HWHM < dE and HWHM != 0.0: print('# - Warning: HWHM smaller than energy resolution.')
if chat: print('# - spin-up: DOS[0] = {0: .6f}, maximum of DoS: {1: .6f} at w = {2: .6f}'\
.format(float(DOSF),float(DOSmax),float(wmax)))
if chat: print('# - spin-up: HWHM = {0: .6f}'.format(float(HWHM)))

###########################################################
## write the output files #################################
if WriteGF:
	header = parline+'\n# E\t\t\tRe GF0\t\tIm GF0\t\tRe SE\t\tIm SE\t\tRe GF\t\tIm GF'
	filename = 'gfUp_'+str(GFtype)+'_U'+str(U)+'eps'+str(ed)+'T'+str(T)+'.dat'
	WriteFile(En_A,GFTup_A,SigmaUp_A,GFintUp_A,WriteMax,WriteStep,header,filename,chat)
	if h!=0.0:	
		filename = 'gfDn_'+str(GFtype)+'_U'+str(U)+'eps'+str(ed)+'T'+str(T)+'.dat'
		WriteFile(En_A,GFTdn_A,SigmaDn_A,GFintUp_A,WriteMax,WriteStep,header,filename,chat)

print('{0: .4f}\t{1: .4f}\t{2: .4f}\t{3: .4f}\t{4: .8f}\t{5: .8f}\t{6: .8f}\t{7: .8f}\t{8: .8f}\t{9: .8f}\t{10: .8f}'\
.format(U,ed,T,h,sp.real(Lambdapp),sp.imag(Lambdapp),sp.real(Lambdamp),sp.imag(Lambdamp),HWHM,Zup,DOSF))

print('{0: .4f}\t{1: .4f}\t{2: .4f}\t{3: .4f}\t{4: .8f}\t{5: .8f}\t{6: .8f}\t{7: .8f}'\
.format(U,ed,T,h,float(nTup),float(nTdn),float(nUp),float(nDn)))

if chat: print('# '+argv[0]+' DONE after {0: .2f} seconds.'.format(float(time()-t)))

## siam_dynamic.py end ###


